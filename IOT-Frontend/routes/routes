const express = require('express');
const Model = require('../models/model');
const dokModel = require('../models/dokmodel');
const confModel = require('../models/confmodel');

const router = express.Router()

const devicelist = [];
const doklist = [];
const config = [];

var ready = false;
var dokready = false;
var confready = false;
var configid;

/*
  on startup fetch all devs from db and save list
 */

console.log('generating list of devices and basics...');

const genList = async () => {
    try{
	const data = await Model.find();
	data.forEach( ( o, i ) => {
	    devicelist.push({
		name: o.name,
		cat: o.category,
		id: o._id,
		type: o.type,
		parts: o.parts.length,
		signs: o.signs.length
	    });
	});
	ready = true;
	console.log('...generated',devicelist.length,'devices');	
    }
    catch(error){
	console.log('error', error.message)
    }
};

const genConfig = async () => {
    try{
	const data = await confModel.find();
	for ( let i=0; i<data.length; i++ ) {
	    o = data[i];
	    if ( o && typeof o !== 'undefined' ) {
		config.push( o );
		configid = o._id;
	    }
	}

	confready = true;
	console.log('...config',o);	
    }
    catch(error){
	console.log('error', error.message)
    }
};

const genDokList = async () => {
    try{
        const data = await dokModel.find();
	data.forEach( ( o, i ) => {
	    doklist.push({
		filename: o.filename,
		deviceid: o.deviceid,
		id: o._id,
		filetype: o.filetype,
		size: o.size
	    });
	});
	dokready = true;
	console.log('...generated',doklist.length,'doks');	
    }
    catch(error){
	console.log('error', error.message)
    }
};

genConfig();
genList();
genDokList();

const updateDevice = ( id, o ) => {
    devicelist.forEach( ( o2, i ) => {
	if ( o2.id == id ) {
	    devicelist[i] = {
		name: o.name,
		cat: o.category,
		id: id,
		type: o.type,
		parts: o.parts.length,
		signs: o.signs.length
	    }
	}
    })
}

const deleteDevice = ( id ) => {
    var foundnum = -1;
    devicelist.forEach( ( o, i ) => {
	if ( o.id == id ) {
	    foundnum = i;
	}
    });
    if ( foundnum > -1 ) devicelist.splice(foundnum,1);
};

const deleteDok = ( id ) => {
    var foundnum = -1;
    doklist.forEach( ( o, i ) => {
	if ( o.id == id ) {
	    foundnum = i;
	}
    });
    if ( foundnum > -1 ) doklist.splice(foundnum,1);
};

//Post Method
router.post('/post', async (req, res) => {
    if ( !ready ) {
        res.status(400).json({message: 'demon not ready'})
	return
    }
    const o=req.body;
    //    console.log('got post:',req.body);
    const data = new Model({
        name: o.name,
        category: o.category,
	type: o.type,
	mscale: o.mscale,
	munit: o.munit,
        parts: o.parts,
        signs: o.signs,
        files: o.files,
        links: o.links,
	routes: o.routes
    })

    try {
        const dataToSave = await data.save();
	devicelist.push({
	    name: o.name,
	    cat: o.category,
	    id: dataToSave._id,
	    type: o.type,
	    parts: o.parts.length,
	    signs: o.signs.length
	});
//	console.log('dataToSave',dataToSave);
        res.status(200).json({ '_id' : dataToSave._id })
    }
    catch (error) {
        res.status(400).json({message: error.message})
    }
})

//Post Method
router.post('/dokpost', async (req, res) => {
    if ( !ready ) {
        res.status(400).json({message: 'demon not ready'})
	return
    }
//    console.log('got dokpost:');
    // Deactivated DB creation for test purposes
    const o=req.body;
    const data = new dokModel({
	deviceid: o.deviceid,
        filename: o.filename,
        size: o.size,
	type: 'file',
        filetype: o.filetype,
        content: o.content
    })

    try {
        const dataToSave = await data.save();
	doklist.push({
	    filename: o.filename,
	    deviceid: o.deviceid,
	    id: dataToSave._id,
	    filetype: o.filetype,
	    size: o.size
	});
//	console.log('dataToSave',dataToSave);
        res.status(200).json(dataToSave)
    }
    catch (error) {
        res.status(400).json({message: error.message})
    }
})

	   
//Post config Method
router.post('/confpost', async (req, res) => {
    if ( !ready ) {
        res.status(400).json({message: 'demon not ready'})
	return
    }
    console.log('got confpost:',req.body);
    // Deactivated DB creation for test purposes
    const o=req.body;
    const data = new confModel({
	info: o.infotext
    })

    try {
        const dataToSave = await data.save();
	config.push({
	    info: o.infotext
	});
//	console.log('dataToSave',dataToSave);
        res.status(200).json(dataToSave)
    }
    catch (error) {
        res.status(400).json({message: error.message})
    }
})

	   
// Get all Method
// simply return everything
// **** CAUTION: this can get very big ****
// use list to get a list of devices incl. id
// and fetch each device in a single request

router.get('/getAll', async (req, res) => {
    if ( !ready ) {
        res.status(400).json({message: 'demon not ready'})
	return
    }
    try{
        const data = await Model.find();
        res.json(data)
    }
    catch(error){
        res.status(500).json({message: error.message})
    }
})

// List all devices, but return only name, id and number of parts and signs per device
router.get('/list', async (req, res) => {
    if ( !ready ) {
        res.status(400).json({message: 'demon not ready'})
	return
    }
    res.json(devicelist)
})

router.get('/doklist', async (req, res) => {
    if ( !dokready ) {
        res.status(400).json({message: 'demon not ready'})
	return
    }
    res.json( doklist );
})

//Get Config
router.get('/getconfig', async (req, res) => {
    try{
        const data = await confModel.findById(configid);
        res.json(data)
    }
    catch(error){
        res.status(500).json({message: error.message})
    }
})

//Get by ID Method
router.get('/getOne/:id', async (req, res) => {
    try{
        const data = await Model.findById(req.params.id);
        res.json(data)
    }
    catch(error){
        res.status(500).json({message: error.message})
    }
})

//Download by ID Method
router.get('/download/:id', async (req, res) => {
    try{
        const data = await dokModel.findById(req.params.id);
	let cont = data.content[0];
	cont = cont.substr(cont.indexOf(',')+1);
	res.type('application/octet-stream');
	res.header('Content-Disposition', 'attachment; filename="'+data.filename+'"');
	const df=Buffer.from(cont, 'base64');
	res.end(df);
    }
    catch(error){
        res.status(500).json({message: error.message})
    }
})

//Update Config
router.patch('/configupdate', async (req, res) => {
    try {
        const options = { new: true };
        const updatedData = req.body;
	console.log('got config update',updatedData);
        const result = await confModel.findByIdAndUpdate(
            configid, updatedData, options
        )

        res.send(result)
    }
    catch (error) {
        res.status(400).json({ message: error.message })
    }
})

//Update by ID Method
router.patch('/update/:id', async (req, res) => {
    try {
        const id = req.params.id;
        const updatedData = req.body;
	updateDevice(id,updatedData);
        const options = { new: true };
	console.log('got update',id,updatedData.routes);
        const result = await Model.findByIdAndUpdate(
            id, updatedData, options
        )

        res.send(result)
    }
    catch (error) {
        res.status(400).json({ message: error.message })
    }
})

//Delete by ID Method
router.delete('/delete/:id', async (req, res) => {
    try {
        const id = req.params.id;
        const data = await Model.findByIdAndDelete(id)
	deleteDevice( id );
        res.send(`Document with ${data.name} has been deleted..`)
    }
    catch (error) {
        res.status(400).json({ message: error.message })
    }
})

router.delete('/dokdelete/:id', async (req, res) => {
    try {
        const id = req.params.id;
        const data = await dokModel.findByIdAndDelete(id)
	deleteDok( id );
        res.send(`Document with ${data.name} has been deleted..`)
    }
    catch (error) {
        res.status(400).json({ message: error.message })
    }
})

module.exports = router;
